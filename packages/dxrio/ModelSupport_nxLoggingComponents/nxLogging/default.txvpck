<?xml version="1.0" encoding="utf-8"?>
<nodeSet version="1.0">
  <view uin="b60amhg68ha727c4q_v">
    <property name="$defaultDiagram" value="true" />
    <property name="$metaclass" value="Package Diagram" />
    <property name="$name" value="default" />
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLogAppenderOverflowEvent">
      <property name="$shortcutReference" value="true" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerLevelSet">
      <property name="$shortcutReference" value="true" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLogFormaterPlain">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLogFormaterPlain:nxLogging.TNxLogFormater" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogFormaterPlain.fFormatSettings" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterPlain.Create()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterPlain.Destroy()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterPlain.formatMessage(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterPlain.formatMessageBase64(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterPlain.parseMessage(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterPlain.parseMessageBase64(System.string)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerCategory">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerCategory.NXLCAT_NONE" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerCategory.NXLCAT_OPTIONS" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerCategory.NXLCAT_RUNNING" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerCategory.NXLCAT_CALCULATING" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerCategory.NXLCAT_FASTRUNNING" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerCategory.NXLCAT_STARTUP" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerCategory.NXLCAT_SHUTDOWN" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerCategory.NXLCAT_REFERENCE" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerCategory.NXLCAT_COM" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerCategory.NXLCAT_DCOM" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerCategory.NXLCAT_PLUGIN" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterApplicationContains">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterApplicationContains:nxLogging.TNxLoggerMessageFilterByText" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterApplicationContains.match(nxLogging.TNxLoggerMessage)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerLogEvent">
      <property name="$shortcutReference" value="true" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TFMThreadSafeList">
      <property name="$shortcutReference" value="true" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterByText">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterByText:nxLogging.TNxLoggerMessageFilter" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterByText.fText" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterByText.AssignTo(System.Classes.TPersistent)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterByText.Create()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterByText.Destroy()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterByText.saveToStream(System.Classes.TStream)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterByText.loadFromStream(System.Classes.TStream)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterByText.setText(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterByText.getText()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterByText.reset()" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterByText.FilterText" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachineMIREvent">
      <property name="$shortcutReference" value="true" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMessageEquals">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMessageEquals:nxLogging.TNxLoggerMessageFilterByText" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMessageEquals.match(nxLogging.TNxLoggerMessage)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterModuleEquals">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterModuleEquals:nxLogging.TNxLoggerMessageFilterByText" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterModuleEquals.match(nxLogging.TNxLoggerMessage)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerCollection">
      <property name="$shortcutReference" value="true" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterModuleContains">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterModuleContains:nxLogging.TNxLoggerMessageFilterByText" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterModuleContains.match(nxLogging.TNxLoggerMessage)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessage">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.fLevel" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.LogLevel" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.fApplicationId" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.fInstanceId" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.fLogUser" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.fThreadId" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.fLevel" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.fCategory" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.fModule" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.fMessage" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.fTimestamp" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.fException" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.fExceptionClassName" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.fLanguage" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.fStackTrace" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.AssignTo(System.Classes.TPersistent)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.setApplicationId(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.setInstanceId(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.setLogUser(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.setThreadId(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.setLevel(nxLogging.TNxLoggerLevel)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.setCategory(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.setModule(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.setMessage(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.setTimestamp(System.TDateTime)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.setException(System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.setLanguage(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.setExceptionClassName(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.setStackTrace(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.Create(System.string,System.string,System.string,nxLogging.TNxLoggerLevel,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.Create(System.string,System.string,System.string,nxLogging.TNxLoggerLevel,System.string,System.string,System.string,System.string,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.Create(System.string,System.string,System.string,nxLogging.TNxLoggerLevel,System.string,System.string,System.string,System.string,System.string,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.Destroy()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.getApplicationId()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.getInstanceId()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.getLogUser()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.getThreadId()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.getLevel()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.getCategory()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.getModule()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.getMessage()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.getTimestamp()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.getException()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.getLanguage()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.getExceptionClassName()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.getStackTrace()" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.ApplicationId" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.InstanceId" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.LogUser" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.ThreadId" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.LogLevel" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.LogCategory" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.LogModule" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.LogMessage" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.LogTimestamp" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.LogException" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.LogExceptionClassName" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.Language" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLoggerMessage.StackTrace" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.INxLogAppenderTCPThreadAdapter">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogAppenderTCPThreadAdapter.consumeEntry()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLogger">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogger.fFilters" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogger.fAppenders" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogger.CurrentLevel" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogger.fCurrentLevel" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogger.Appenders[System.Integer]" />
      <reference referencedUin="delphi:l_impl:src:nxLoggingComponents:nxLogging.TNxLogger:nxLogging.INxLogger" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogger.OnLog" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogger.OnAppend" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogger.fOnLog" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogger.fOnAppend" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogger.fCSLog" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogger.fLogFormatSettings" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogger.fApplicationID" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogger.fInstanceID" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogger.fUserIdent" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogger.fLanguage" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogger.fCurrentLevel" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogger.fCSCurrentLevel" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogger.fAppenders" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogger.fFilters" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogger.fOnAppend" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogger.fOnLog" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.getAppenderCount()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.getAppender(System.Integer)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.getCurrentLevel()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.setCurrentLevel(nxLogging.TNxLoggerLevel)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.matchFilters(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.getMachineIdent()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.Create(System.Classes.TComponent)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.Destroy()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.isImportantLogLevel(nxLogging.TNxLoggerLevel,nxLogging.TNxLoggerLevel)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.initializeFileLogging(System.string,System.string,System.string,System.Integer,nxLogging.TNxLogAppenderFileStrategy)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.initializeServerTCPLogging(System.string,System.string,System.Integer,System.string,System.Integer,System.string,System.string,set@nxLogging.TNxLoggerLevel,System.Int64)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.doneLogging()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.addAppender(nxLogging.TNxLogAppender)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.deleteAppender(System.Integer)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.clearAppenders()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.log(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.log(nxLogging.TNxLoggerLevel,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.log(nxLogging.TNxLoggerLevel,System.string,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.log(nxLogging.TNxLoggerLevel,System.string,System.string,nxLogging.TNxLoggerCategory,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.log(nxLogging.TNxLoggerLevel,System.string,System.string,System.string,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.log(nxLogging.TNxLoggerLevel,System.string,System.string,System.string,System.string,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.fatal(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.fatal(System.string,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.fatal(System.string,System.string,nxLogging.TNxLoggerCategory,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.error(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.error(System.string,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.error(System.string,System.string,nxLogging.TNxLoggerCategory,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.warn(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.warn(System.string,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.warn(System.string,System.string,nxLogging.TNxLoggerCategory,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.info(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.info(System.string,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.info(System.string,System.string,nxLogging.TNxLoggerCategory,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.debug(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.debug(System.string,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.debug(System.string,System.string,nxLogging.TNxLoggerCategory,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.trace(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.trace(System.string,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.trace(System.string,System.string,nxLogging.TNxLoggerCategory,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.isTrace()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.isDebug()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.isInfo()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.isWarn()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.isError()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogger.isFatal()" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogger.AppenderCount" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogger.Appenders[System.Integer]" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogger.CurrentLevel" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogger.MachineIdent" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogger.OnAppend" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogger.OnLog" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.Adapter" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.fAdapter" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.fTCP" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.fFormatSettings" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.fMachineIdent" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.fHostOrIP" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.fPort" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.fRetryCount" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.fUsername" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.fPassword" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.fAdapter" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.fDisconnectSeconds" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.Execute()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.Create(System.Boolean)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.Destroy()" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.FormatSettings" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.MachineIdent" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.HostOrIP" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.Port" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.RetryCount" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.Username" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.Password" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.Adapter" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCPThread.DisconnectSeconds" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterModuleStarting">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterModuleStarting:nxLogging.TNxLoggerMessageFilterByText" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterModuleStarting.match(nxLogging.TNxLoggerMessage)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerLevel">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerLevel.NXLL_TRACE" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerLevel.NXLL_DEBUG" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerLevel.NXLL_INFO" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerLevel.NXLL_WARN" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerLevel.NXLL_ERROR" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerLevel.NXLL_FATAL" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet.LevelSet" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet.fLevelSet" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet:nxLogging.TNxLoggerMessageFilter" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet.fLevelSet" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet.AssignTo(System.Classes.TPersistent)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet.Create()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet.Destroy()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet.saveToStream(System.Classes.TStream)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet.loadFromStream(System.Classes.TStream)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet.setLevel(nxLogging.TNxLoggerLevel)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet.unsetLevel(nxLogging.TNxLoggerLevel)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet.setLevelAndAbove(nxLogging.TNxLoggerLevel)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet.setLevelSet(set@nxLogging.TNxLoggerLevel)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet.isLevelInSet(nxLogging.TNxLoggerLevel)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet.reset()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet.match(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterLevelSet.LevelSet" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerCollectionItem">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLoggerCollectionItem.Appender" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLoggerCollectionItem.fAppender" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerCollectionItem.fAppender" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerCollectionItem.Create(System.Classes.TCollection)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerCollectionItem.Destroy()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerCollectionItem.append(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLoggerCollectionItem.Appender" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachineStarting">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachineStarting:nxLogging.TNxLoggerMessageFilterMachine" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachineStarting.matchMachineIdent(nxLogging.TNxLoggerMessage,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachineStarting.match(nxLogging.TNxLoggerMessage)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TFMList">
      <property name="$shortcutReference" value="true" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachine">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachine.OnMachineIdentRequired" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachine.fOnMachineIdentRequired" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachine:nxLogging.TNxLoggerMessageFilterByText" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachine.fOnMachineIdentRequired" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachine.AssignTo(System.Classes.TPersistent)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachine.Create()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachine.Destroy()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachine.matchMachineIdent(nxLogging.TNxLoggerMessage,System.string)" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachine.OnMachineIdentRequired" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile:nxLogging.TNxLogAppender" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.Strategy" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.fStrategy" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.fFormater" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.fFormater" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.fFormatSettings" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.fDirectory" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.fFilenameBase" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.fRetryCount" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.fStrategy" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.fLastDate" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.isNextDay()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.writeString(System.Classes.TStream,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.appendSingleFile(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.appendNewFiles(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.appendRename(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.Create(System.Classes.TComponent)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.Destroy()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.append(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderFile.Strategy" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLogAppenderChain">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogAppenderChain.ChainedLogger" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogAppenderChain.fChainedLogger" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLogAppenderChain:nxLogging.TNxLogAppender" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderChain.fChainedLogger" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderChain.Create(System.Classes.TComponent)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderChain.Destroy()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderChain.append(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderChain.ChainedLogger" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilter">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilter.reset()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilter.match(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilter.saveToStream(System.Classes.TStream)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilter.loadFromStream(System.Classes.TStream)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMessageStarting">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMessageStarting:nxLogging.TNxLoggerMessageFilterByText" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMessageStarting.match(nxLogging.TNxLoggerMessage)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMessageContains">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMessageContains:nxLogging.TNxLoggerMessageFilterByText" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMessageContains.match(nxLogging.TNxLoggerMessage)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.OnOverflow" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.UserFilter" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.LevelFilter" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fOnOverflow" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fWorker" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fUserFilter" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fLevelFilter" />
      <reference referencedUin="delphi:l_impl:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP:nxLogging.INxLogAppenderTCPThreadAdapter" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP:nxLogging.TNxLogAppender" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fFormater" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fFormatSettings" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fMachineIdent" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fHostOrIP" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fPort" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fRetryCount" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fUsername" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fPassword" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fMaxEntries" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fLevelFilter" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fUserFilter" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fFormater" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fBuffer" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fWorker" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fDisconnectSeconds" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.fOnOverflow" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.setMachineIdent(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.setMaxEntries(System.Integer)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.getMaxEntries()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.getCurrentEntries()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.consumeEntry()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.Create(System.Classes.TComponent)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.Destroy()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.isStarted()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.start()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.stop()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.clearBuffer()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.append(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.LevelFilter" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.UserFilter" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.MaxEntries" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.CurrentEntries" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.DisconnectSeconds" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.MachineIdent" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogAppenderTCP.OnOverflow" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLogAppender">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogAppender.append(nxLogging.TNxLoggerMessage)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.@unitclass">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:nxLoggingComponents:nxLogging.@unitclass.fDefaultLogger" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.@unitclass.IC_DEFAULTMAXTCPENTRIES" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.@unitclass.SC_ALLFILETAIL" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.@unitclass.SC_CURRENTFILETAIL" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.@unitclass.SC_FILEFROM" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.@unitclass.NXLOGPTCP_OK" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.@unitclass.NXLOGPTCP_BADREQUEST" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.@unitclass.NXLOGPTCP_UNAUTHORIZED" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.@unitclass.NXLOGPTCP_PAYMENTREQUIRED" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.@unitclass.NXLOGPTCP_FORBIDDEN" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.@unitclass.NXLOGPTCP_NOTFOUND" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.@unitclass.NXLOGPTCP_METHODNOTALLOWED" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.@unitclass.NXLOGPTCP_INTERNALSERVERERROR" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.@unitclass.NXLOGPTCP_NOTIMPLEMENTED" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.@unitclass.NXLOGPTCP_SERVICETEMPORARYUNAVAILABLE" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.@unitclass.SC_WRONGSTRINGLENGTHSHOULDBEEVEN" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.@unitclass.Register()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.@unitclass.NowUTC()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.@unitclass.initLoggerFormatSettings(ref@System.SysUtils.TFormatSettings)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.@unitclass.Logger()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.@unitclass.isIPv4()" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.@unitclass.fDefaultLogger" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.@unitclass.internalGetCurrentProcessId()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.@unitclass.internalGetCurrentThreadId()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.@unitclass.encodeBase64(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.@unitclass.decodeBase64(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.@unitclass.GetLocalComputerName()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.@unitclass.convertBytesToString(System.Byte[])" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.@unitclass.convertStringToBytes(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.@unitclass.getUserFromOS()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.@unitclass._TryStrToDateTime(System.string,out@System.TDateTime,System.SysUtils.TFormatSettings)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.@unitclass.getMD5OfString(System.string)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.INxLogger">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.log(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.log(nxLogging.TNxLoggerLevel,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.log(nxLogging.TNxLoggerLevel,System.string,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.log(nxLogging.TNxLoggerLevel,System.string,System.string,nxLogging.TNxLoggerCategory,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.log(nxLogging.TNxLoggerLevel,System.string,System.string,System.string,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.log(nxLogging.TNxLoggerLevel,System.string,System.string,System.string,System.string,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.fatal(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.fatal(System.string,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.fatal(System.string,System.string,nxLogging.TNxLoggerCategory,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.error(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.error(System.string,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.error(System.string,System.string,nxLogging.TNxLoggerCategory,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.warn(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.warn(System.string,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.warn(System.string,System.string,nxLogging.TNxLoggerCategory,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.info(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.info(System.string,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.info(System.string,System.string,nxLogging.TNxLoggerCategory,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.debug(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.debug(System.string,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.debug(System.string,System.string,nxLogging.TNxLoggerCategory,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.trace(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.trace(System.string,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.trace(System.string,System.string,nxLogging.TNxLoggerCategory,System.SysUtils.Exception)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.isTrace()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.isDebug()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.isInfo()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.isWarn()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.isError()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.INxLogger.isFatal()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLogAppenderFileStrategy">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderFileStrategy.NXLFS_SINGLEFILE" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderFileStrategy.NXLFS_NEWFILES" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogAppenderFileStrategy.NXLFS_RENAME" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageEvent">
      <property name="$shortcutReference" value="true" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLogFormaterDefault">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLogFormaterDefault:nxLogging.TNxLogFormater" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogFormaterDefault.fFormatSettings" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterDefault.Create()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterDefault.Destroy()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterDefault.formatMessage(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterDefault.formatMessageBase64(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterDefault.parseMessage(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterDefault.parseMessageBase64(System.string)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachineContains">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachineContains:nxLogging.TNxLoggerMessageFilterMachine" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachineContains.matchMachineIdent(nxLogging.TNxLoggerMessage,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachineContains.match(nxLogging.TNxLoggerMessage)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterApplicationStarting">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterApplicationStarting:nxLogging.TNxLoggerMessageFilterByText" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterApplicationStarting.match(nxLogging.TNxLoggerMessage)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLogFormaterTCP">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLogFormaterTCP:nxLogging.TNxLogFormater" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogFormaterTCP.fFormatSettings" />
      <reference referencedUin="delphi:e_field:src:nxLoggingComponents:nxLogging.TNxLogFormaterTCP.fMachineIdent" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterTCP.Create()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterTCP.Destroy()" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterTCP.formatMessage(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterTCP.formatMessageBase64(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterTCP.formatMessageExtra(nxLogging.TNxLoggerMessage,System.Int64,System.Byte[])" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterTCP.formatMessageExtraBase64(nxLogging.TNxLoggerMessage,System.Int64,System.Byte[])" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterTCP.parseMessage(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterTCP.parseMessageBase64(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterTCP.parseMessageMachine(System.string,ref@System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterTCP.parseMessageMachineBase64(System.string,ref@System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterTCP.parseMessageMachineExtra(System.string,ref@System.string,ref@System.Int64,ref@System.Byte[])" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormaterTCP.parseMessageMachineExtraBase64(System.string,ref@System.string,ref@System.Int64,ref@System.Byte[])" />
      <reference referencedUin="delphi:e_property:src:nxLoggingComponents:nxLogging.TNxLogFormaterTCP.MachineIdent" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterApplicationEquals">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterApplicationEquals:nxLogging.TNxLoggerMessageFilterByText" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterApplicationEquals.match(nxLogging.TNxLoggerMessage)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.ENxLoggingConvertError">
      <property name="$shortcutReference" value="true" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLogFormater">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormater.formatMessage(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormater.parseMessage(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormater.formatMessageBase64(nxLogging.TNxLoggerMessage)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormater.parseMessageBase64(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormater.isLevelString(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormater.convertToLevel(System.string,System.Boolean)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormater.convertLevelToString(nxLogging.TNxLoggerLevel,System.Boolean)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormater.convertToCategory(System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLogFormater.convertCategoryToString(nxLogging.TNxLoggerCategory)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachineEquals">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachineEquals:nxLogging.TNxLoggerMessageFilterMachine" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachineEquals.matchMachineIdent(nxLogging.TNxLoggerMessage,System.string)" />
      <reference referencedUin="delphi:e_method:src:nxLoggingComponents:nxLogging.TNxLoggerMessageFilterMachineEquals.match(nxLogging.TNxLoggerMessage)" />
    </reference>
  </view>
</nodeSet>